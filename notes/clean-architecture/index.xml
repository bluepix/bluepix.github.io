<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Clean Architecture on 诗川的笔记</title>
    <link>/notes/clean-architecture/</link>
    <description>Recent content in Clean Architecture on 诗川的笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>©2020 bluepix</copyright>
    <lastBuildDate>Tue, 07 Apr 2020 14:06:15 +0800</lastBuildDate>
    
        <atom:link href="/notes/clean-architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Clean Architecture] 30~34. 细节及其它</title>
      <link>/notes/clean-architecture/30-34-details-others/</link>
      <pubDate>Tue, 07 Apr 2020 14:06:15 +0800</pubDate>
      
      <guid>/notes/clean-architecture/30-34-details-others/</guid>
      <description>数据库是细节 数据结构 (structure) 或说数据模型 (model) 对于系统架构是至关重要的. 关系型数据库的流行很大程度上得益于磁盘的存在, 随着技术演进, 内存可能最终代替磁</description>
      
    </item>
    
    <item>
      <title>[Clean Architecture] 20~29. 架构 (二)</title>
      <link>/notes/clean-architecture/20-29-architecture-2/</link>
      <pubDate>Tue, 07 Apr 2020 14:03:55 +0800</pubDate>
      
      <guid>/notes/clean-architecture/20-29-architecture-2/</guid>
      <description>业务规则 (Business rules) 严格来说, 业务规则是指能创造效益或节约成本的规则 (make or save money). 关键业务规则 (Critical business rules) 关键业务规则是指那些由业务本身决定, 即使不依赖自动化系</description>
      
    </item>
    
    <item>
      <title>[Clean Architecture] 15~19. 架构 (一)</title>
      <link>/notes/clean-architecture/15-19-architecture-1/</link>
      <pubDate>Tue, 07 Apr 2020 09:58:55 +0800</pubDate>
      
      <guid>/notes/clean-architecture/15-19-architecture-1/</guid>
      <description>什么是架构/架构师做什么 架构师不脱离代码工作, 因为不能脱离问题去解决问题. 架构的目的和策略 架构是构建者赋予软件系统的形态, 包括组件的划分、配</description>
      
    </item>
    
    <item>
      <title>[Clean Architecture] 12~14.组件原则</title>
      <link>/notes/clean-architecture/12-14-component-principles/</link>
      <pubDate>Tue, 07 Apr 2020 08:38:13 +0800</pubDate>
      
      <guid>/notes/clean-architecture/12-14-component-principles/</guid>
      <description>组件 组件是可作为系统的一部分独立部署的最小实体, 是可独立部署和独立开发的单元. 组件简史 起初, 程序是不可重定位的 (not relocatable) ,必须在程序中声明加载到内</description>
      
    </item>
    
    <item>
      <title>[Clean Architecture] 07~11. SOLID 设计原则</title>
      <link>/notes/clean-architecture/07-11-solid/</link>
      <pubDate>Tue, 07 Apr 2020 01:43:07 +0800</pubDate>
      
      <guid>/notes/clean-architecture/07-11-solid/</guid>
      <description>作用: 指导模块或组件内部的类及类之间交互的设计 (类指数据和函数的组合, 不特指OO语言中的类), 使软件的中级结构 (mid-level structure) 包容变化 易于理解 使组件可复</description>
      
    </item>
    
    <item>
      <title>[Clean Architecture] 01~06. 引论, 编程范式</title>
      <link>/notes/clean-architecture/01-06-intro-n-paradigms/</link>
      <pubDate>Mon, 06 Apr 2020 19:54:05 +0800</pubDate>
      
      <guid>/notes/clean-architecture/01-06-intro-n-paradigms/</guid>
      <description>架构的意义 设计与架构 (Design and Architecture) 表面上, 架构关心刈除细节之后的总体图景, 而设计关心实现细节, 但事实上, 两者对立统一, 不可分割. 架构的目标 用最小的人</description>
      
    </item>
    
  </channel>
</rss>
